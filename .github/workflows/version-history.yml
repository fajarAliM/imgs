name: Update version history

on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Release branch or tag'
        required: true
        default: 'main'
      cg:
        description: 'Generate manifest.json'
        required: true
        default: 'false'
      push:
        description: 'Update repository with results'
        required: true
        default: 'true'
      overwrite:
        description: 'Overwrite existing files'
        required: true
        default: 'true'
      image:
        description: 'Image name (Optional)'
        required: false
        default: ''


jobs:
  image_info:
    name: Update version history
    # if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:

    - name: Free more space
      id: free_space 
      run: |
        set -e
        # Ensure enough space is available for build
        sudo apt-get autoremove -y
        sudo apt-get clean -y
        sudo rm -rf /usr/share/dotnet

    - name: Checkout ref
      id: checkout_ref
      uses: actions/checkout@v3
      with:
        path: 'ref'
        ref: ${{ github.ref }}
  
    - name: Checkout
      id: checkout_main
      uses: actions/checkout@v3
      with:
        path: 'temp-build'
        ref: ${{ github.event.inputs.release }}

    - name: Azure CLI login
      id: az_login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZ_ACR_CREDS }}

    - name: Get image info
      id: Get_image_info
      env:
        REGISTRY: ${{ secrets.REGISTRY }}
        REGISTRY_BASE_PATH: ${{ secrets.REGISTRY_BASE_PATH }}
        STUB_REGISTRY: ${{ secrets.STUB_REGISTRY }}
        STUB_REGISTRY_BASE_PATH: ${{ secrets.STUB_REGISTRY_BASE_PATH }}
      run: |
        set -e

        # ACR login
        ACR_REGISTRY_NAME=$(echo "$REGISTRY" | grep -oP '(.+)(?=\.azurecr\.io)')
        az acr login --name $ACR_REGISTRY_NAME
        # Go to the temp-build, copy the build tool from ref since this is the version for the workflow
        cd "$GITHUB_WORKSPACE/temp-build"
        rm -rf build node_modules
        cp -r "$GITHUB_WORKSPACE/ref/build" "$GITHUB_WORKSPACE/temp-build/"

        yarn install

        # Pull images and update manifest.json, but output back to ref
        build/vscdc info  --no-build \
                          --markdown \
                          --prune \
                          --release ${{ github.event.inputs.release }} \
                          --registry "$REGISTRY" \
                          --registry-path "$REGISTRY_BASE_PATH" \
                          --stub-registry "$STUB_REGISTRY" \
                          --stub-registry-path "$STUB_REGISTRY_BASE_PATH" \
                          --output-path "$GITHUB_WORKSPACE/ref" \
                          $(if [ "${{ github.event.inputs.overwrite }}" = "false" ]; then echo '--no-overwrite'; else echo '--overwrite'; fi) \
                          $(if [ "${{ github.event.inputs.cg }}" = "false" ]; then echo '--no-cg'; else echo '--cg'; fi) \
                          ${{ github.event.inputs.image }}

    - name: Create PR for image information
      id: push_image_info
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -e

        # Push updates to ref
        cd "$GITHUB_WORKSPACE/ref"

        GIT_BRANCH=$(echo "${{ github.ref }}" | grep -oP 'refs/(heads|tags)/\K(.+)')
        if [ "$GIT_BRANCH" == "" ]; then 
            GIT_BRANCH=main
        fi

        git config --global user.name github-actions
        git config --global user.email github-actions@github.com
        git config pull.rebase false
        branch=automated-update-for-image-history-$GITHUB_RUN_ID
        # temp test
        git checkout main
        git checkout -b $branch
        message='Automated update for image history'

        # Pull in anything that may have come in
        git pull "https://github-actions:$GITHUB_TOKEN@github.com/${{ github.repository }}" "HEAD:main"

        # Add / update and commit
        git add -A
        git commit -m "$message" || export NO_UPDATES=true

        # Push (unless disabled for testing)
        if [ "$NO_UPDATES" != "true" ] && [ "${{ github.event.inputs.push }}" = "true" ]; then
            git push origin "$branch"
            gh pr create --title "$message" --body "$message"
        fi
